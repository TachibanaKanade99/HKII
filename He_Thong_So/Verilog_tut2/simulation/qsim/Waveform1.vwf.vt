// Copyright (C) 2016  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/17/2018 22:49:34"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Ex2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Ex2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk0_n;
reg [0:1] clk1_n;
reg mr1;
reg mr2;
reg ms1;
reg ms2;
// wires                                               
wire [0:3] out;

// assign statements (if any)                          
Ex2 i1 (
// port map - connection between master ports and signals/registers   
	.clk0_n(clk0_n),
	.clk1_n(clk1_n),
	.mr1(mr1),
	.mr2(mr2),
	.ms1(ms1),
	.ms2(ms2),
	.out(out)
);
initial 
begin 
#20000000 $finish;
end 

// clk0_n
always
begin
	clk0_n = 1'b0;
	clk0_n = #1000000 1'b1;
	#1000000;
end 
// clk1_n[ 1 ]
always
begin
	clk1_n[1] = 1'b0;
	clk1_n[1] = #1000000 1'b1;
	#1000000;
end 
// clk1_n[ 0 ]
always
begin
	clk1_n[0] = 1'b0;
	clk1_n[0] = #1000000 1'b1;
	#1000000;
end 

// mr1
initial
begin
	mr1 = 1'b1;
	mr1 = #1000000 1'b0;
	mr1 = #1000000 1'b1;
	mr1 = #1000000 1'b0;
	mr1 = #3000000 1'b1;
	mr1 = #1000000 1'b0;
end 

// mr2
initial
begin
	mr2 = 1'b1;
	mr2 = #1000000 1'b0;
	mr2 = #1000000 1'b1;
	mr2 = #1000000 1'b0;
end 

// ms1
initial
begin
	ms1 = 1'b1;
	ms1 = #1000000 1'b0;
	ms1 = #3000000 1'b1;
	ms1 = #1000000 1'b0;
	ms1 = #1000000 1'b1;
	ms1 = #1000000 1'b0;
end 

// ms2
initial
begin
	ms2 = 1'b0;
	ms2 = #2000000 1'b1;
	ms2 = #1000000 1'b0;
	ms2 = #1000000 1'b1;
	ms2 = #1000000 1'b0;
end 
endmodule

