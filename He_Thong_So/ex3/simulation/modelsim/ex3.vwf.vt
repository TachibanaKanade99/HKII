// Copyright (C) 2016  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/16/2018 00:49:12"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ex3
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ex3_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [1:0] x1;
reg [1:0] x2;
reg [1:0] x3;
reg [1:0] x4;
// wires                                               
wire f;
wire g;
wire h;

// assign statements (if any)                          
ex3 i1 (
// port map - connection between master ports and signals/registers   
	.f(f),
	.g(g),
	.h(h),
	.x1(x1),
	.x2(x2),
	.x3(x3),
	.x4(x4)
);
initial 
begin 
#16000000 $stop;
end 
// x1[ 1 ]
always
begin
	x1[1] = 1'b0;
	x1[1] = #1000000 1'b1;
	#1000000;
end 
// x1[ 0 ]
always
begin
	x1[0] = 1'b0;
	x1[0] = #1000000 1'b1;
	#1000000;
end 
// x2[ 1 ]
always
begin
	x2[1] = 1'b0;
	x2[1] = #2000000 1'b1;
	#2000000;
end 
// x2[ 0 ]
always
begin
	x2[0] = 1'b0;
	x2[0] = #2000000 1'b1;
	#2000000;
end 
// x3[ 1 ]
always
begin
	x3[1] = 1'b0;
	x3[1] = #4000000 1'b1;
	#4000000;
end 
// x3[ 0 ]
always
begin
	x3[0] = 1'b0;
	x3[0] = #4000000 1'b1;
	#4000000;
end 
// x4[ 1 ]
always
begin
	x4[1] = 1'b0;
	x4[1] = #8000000 1'b1;
	#8000000;
end 
// x4[ 0 ]
always
begin
	x4[0] = 1'b0;
	x4[0] = #8000000 1'b1;
	#8000000;
end 
endmodule

